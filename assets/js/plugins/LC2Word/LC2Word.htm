<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta charset="UTF-8">
	<title>Demo of docxtemplater</title>
	<link rel="stylesheet" href="js/main.css">

	<!-- Mandatory js for the library to work -->
	<script type="text/javascript" src="js/JSWord.js"></script>
	<script src="js/angular-expressions.js"></script>

	<script src="js/FileSaver.js"></script>
    <script src="js/jszip-utils.js"></script>

  <!--
  Mandatory in IE 6, 7, 8 and 9.
  -->
  <!--[if IE]>
  <script type="text/javascript" src="../vendor/jszip-utils-ie.js"></script>
  <![endif]-->

	<!-- Include this only if you want to use downloadify (last example) -->
	<script src="js/downloadify.js"></script>
	<script src="js/swfobject.js"></script>
</head>
<body>



<h1>docxtemplater v1</h1>

<p><b>docxtemplater</b> is a small library to generate docx documents 
given a docx template. It can replace tags by their values and replace 
images with other images. It is very user oriented as users can without a
 lot of programming knowledge create their first template and 
automatically change variables in it.</p>

<a href="#variables">Replace Variables</a><br>
<a href="#formating">Formating</a><br>
<a href="#parsing">Parsing</a><br>
<a href="#loops">Loops</a><br>
<a href="#tables">Loops and tables</a><br>
<a href="#lists">Lists</a><br>
<a href="#naming">Naming the output</a><br>
<a href="#qrcode">Using QrCodes</a><br>
<a href="#qrcodeloop">Replacing many images with QrCode</a><br>
<a href="#rawxml">Raw Xml Insertion</a><br>


<h1>Templates</h1>

DocxGen is based on word templates.
<section>
<h2 id="variables"><em>Variables</em>: Use {tagName} to replace variables</h2>
<table class="demo">
<tbody><tr>
	<td>
		<img src="js/textTagging.PNG" alt="">
	</td>
	<td>
	<div>=&gt; <br>Results in:</div>
	</td>
	<td>
		<img src="js/textTaggingResult.PNG" alt="">
	</td>
</tr>
<tr>
	<td colspan="3">
		<h3>Code Used:</h3>
		<textarea style="height: 224px;" raw="lctemplate.docx">loadFile("lctemplate.docx",function(err,content){
                doc=new DocxGen(content)
                doc.setData( {"first_name":"Hipp",
                    "last_name":"Edgar",
                    "phone":"0652455478",
                    "description":"New Website"
                    }
                ) //set the templateVariables
                doc.render() //apply them (replace all occurences of {first_name} by Hipp, ...)
                out=doc.getZip().generate({type:"blob"}) //Output the document using Data-URI
                saveAs(out,"output.docx")
            })
	</textarea><button class="raw">View Initial Document</button><button class="execute">Execute</button>
	</td>
</tr>
</tbody></table>
</section>

<h2>loadFile</h2>

loadFile is the following function:

<pre>loadFile=function(url,callback){
    JSZipUtils.getBinaryContent(url,function(err,data){
		callback(null,data)
    });
}
</pre>

<section>
<h2 id="formating"><em>Formating</em>: DocxGen doesn't ever change your formatting!</h2>
<table class="demo">
<tbody><tr>
	<td>
		<img src="js/formatTagging.png" alt="">
	</td>
	<td>
	<div>=&gt; <br>Results in:</div>
	</td>
	<td>
		<img src="js/formatTaggingResult.png" alt="">
	</td>
</tr>
<tr>
	<td colspan="3">
		<h3>Code Used:</h3>
		<textarea style="height: 239px;" raw="tagFormating.docx">
            loadFile("tagFormating.docx",function(err,content){
	doc=new DocxGen(content)
	doc.setData({
		"first_name":"Hipp",
		"last_name":"Edgar",
		"phone":"0652455478",
		"description":"New Website"
		}); //set the templateVariables
	doc.render() //apply them (replace all occurences of {first_name} by Hipp, ...)
	output=doc.getZip().generate({type:"blob"}) //Output the document using Data-URI
	saveAs(output,"output.docx")
});
		</textarea><button class="raw">View Initial Document</button><button class="execute">Execute</button>
	</td>
</tr>
</tbody></table>
</section>

<section>
<h2 id="parsing"><em>Parsing</em> we enable you to use Angular Like Syntax</h2>
<p>To enable this in the browser, you need to include vendor/angular-parser-browser.js</p>
<table class="demo">
<tbody><tr>
	<td>
		<img src="js/angularTagging.PNG" alt="">
	</td>
	<td>
	<div>=&gt; <br>Results in:</div>
	</td>
	<td>
		<img src="js/angularTaggingResult.PNG" alt="">
	</td>
</tr>
<tr>
	<td colspan="3">
		<h3>Code Used:</h3>
		<textarea style="height: 344px;" raw="angularExample.docx">expressions= require('angular-expressions')
angularParser= function(tag){
	expr=expressions.compile(tag);
	return {get:expr};
}

	loadFile("angularExample.docx",function(err,content){
	doc=new DocxGen(content)
	doc.setOptions({parser:angularParser})
	doc.setData({
		person:{
			first_name:"Hipp",
			last_name:"Edgar",
			birth_year:1955,
			age:59
		}}); //set the templateVariables
	doc.render() //apply them (replace all occurences of {first_name} by Hipp, ...)
	output=doc.getZip().generate({type:"blob"}) //Output the document using Data-URI
	saveAs(output,"output.docx")
});
		</textarea><button class="raw">View Initial Document</button><button class="execute">Execute</button>
	</td>
</tr>
</tbody></table>
</section>
<section>
<h2 id="loops"><em>Loops</em>: You can use the mustache like syntax: {#tagName} {/tagname} to loop inside an array</h2>

<p>tagName has to be an array of objects, every element of the array 
will be used to output what is between the opening loop tag and the 
closing loop tag.</p>
	<table class="demo">
		<tbody><tr>
			<td><img src="js/loopTagging.png" alt=""></td>
			<td>
				<div>=&gt; <br>Results in:</div>
			</td>
			<td><img src="js/loopTaggingResult.PNG" alt=""></td>
		</tr>
		<tr>
			<td colspan="3">
				<h3>Code Used:</h3>
				<textarea style="height: 284px;" raw="tagLooping.docx">	loadFile("tagLooping.docx",function(err,content){
	doc=new DocxGen(content)
doc.setData({
	"products": [{
 	 	 "title":"Duk",
 	 	 "name":"DukSoftware",
 	 	 "reference":"DS0"
		},{
 	 	 "title":"Tingerloo",
 	 	 "name":"Tingerlee",
 	 	 "reference":"T00"
	}]}); //set the templateVariables
doc.render() //apply them
output=doc.getZip().generate({type:"blob"}) //Output the document using Data-URI
saveAs(output,"output.docx")
});
				</textarea><button class="raw">View Initial Document</button><button class="execute">Execute</button>
			</td>
		</tr>
	</tbody></table>
</section>


<section>
	<h2 id="tables"><em>Tables</em>: loops work inside tables too!</h2>
	<p>This also works with Bullet Lists</p>
	<table class="demo">
		<tbody><tr>
			<td><img src="js/tableTagging.PNG"></td>
			<td>
				<div>=&gt; <br>Results in:</div>
			</td>
			<td><img src="js/tableTaggingResult.PNG"></td>
		</tr>
		<tr>
			<td colspan="3">
				<h3>Code Used:</h3>
				<textarea style="height: 284px;" raw="tagIntelligentLoopTable.docx">	loadFile("tagIntelligentLoopTable.docx",function(err,content){
	doc=new DocxGen(content)
	doc.setData({
		"clients":[{
			"first_name":"John",
			"last_name":"Doe",
			"phone":"+44546546454"
		},{
			"first_name":"Jane",
			"last_name":"Doe",
			"phone":"+445476454"
		}]}); //set the templateVariables
	doc.render() //apply them
	output=doc.getZip().generate({type:"blob"}) //Output the document using Data-URI
	saveAs(output,"output.docx")
});
				</textarea><button class="raw">View Initial Document</button><button class="execute">Execute</button>
			</td>
		</tr>
	</tbody></table>
</section>

<section>
	<h2 id="lists"><em>lists</em>: dash (-) loops works for any element</h2>
	<p>This could work for lists, paragraphs, or any element that could be 
repeated. The syntax is {-element name} {/name}. When encountering such 
an element, docxgen will search for the first parent element that equals
 element, and loop over this.</p>
	<table class="demo">
		<tbody><tr>
			<td><img src="js/listTagging.PNG"></td>
			<td>
				<div>=&gt; <br>Results in:</div>
			</td>
			<td><img src="js/listTaggingResult.PNG"></td>
		</tr>
		<tr>
			<td colspan="3">
				<h3>Code Used:</h3>
				<textarea style="height: 194px;" raw="tagDashLoopList.docx">	
loadFile("tagDashLoopList.docx",function(err,content){
	doc=new DocxGen(content)
	doc.setData(
	
{"os":[{"type":"linux","price":"0","reference":"Ubuntu10"},{"type":"windows","price":"500","reference":"Win7"},{"type":"apple","price":"1200","reference":"MACOSX"}]}

	)
	doc.render()
	output=doc.getZip().generate({type:"blob"})
	saveAs(output,"output.docx")
});
				</textarea><button class="raw">View Initial Document</button><button class="execute">Execute</button>
			</td>
		</tr>
	</tbody></table>
</section>

<section>
	<h2 id="rawxml">Embed your own XML</h2>
	<p>You can embed your own XML using the {@rawXml} syntax. DocXTemplater
 will replace the containing w:p tag to the xml you enter in the json. 
This can be particularly useful to embed: tables, user input that could 
be bold, italics, change the size, color, or whatever. However, you 
can't create some graphs, smartarts because they use multiple files and 
not just the one you're in.</p>
	<table class="demo">
		<tbody><tr>
			<td><img src="js/xmlTagging.PNG"></td>
			<td>
				<div>=&gt; <br>Results in:</div>
			</td>
			<td><img src="js/xmlTaggingResult.PNG"></td>
		</tr>
		<tr>
			<td colspan="3">
				<h3>Code Used:</h3>
				<textarea style="height: 179px;" raw="xmlInsertionExample.docx">				
	loadFile("xmlInsertionExample.docx",function(err,content){
					doc=new DocxGen(content)
					
doc.setData({complexXml:'&lt;w:p&gt;&lt;w:pPr&gt;&lt;w:rPr&gt;&lt;w:color
 
w:val="FF0000"/&gt;&lt;/w:rPr&gt;&lt;/w:pPr&gt;&lt;w:r&gt;&lt;w:rPr&gt;&lt;w:color
 w:val="FF0000"/&gt;&lt;/w:rPr&gt;&lt;w:t&gt;My 
custom&lt;/w:t&gt;&lt;/w:r&gt;&lt;w:r&gt;&lt;w:rPr&gt;&lt;w:color 
w:val="00FF00"/&gt;&lt;/w:rPr&gt;&lt;w:t&gt;XML&lt;/w:t&gt;&lt;/w:r&gt;&lt;/w:p&gt;'});

					doc.render();
					output=doc.getZip().generate({type:"blob"})
					saveAs(output,"output.docx")
					});
				</textarea><button class="raw">View Initial Document</button><button class="execute">Execute</button>
			</td>
		</tr>
	</tbody></table>
</section>



</body></html>